package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/IBM/sarama"
	"google.golang.org/protobuf/proto"
)

// ConsumerGroupHandler ÂÆûÁé∞ sarama.ConsumerGroupHandler Êé•Âè£
type ConsumerGroupHandler struct {
	ready chan bool
	mu    sync.Mutex
}

func (h *ConsumerGroupHandler) Setup(sarama.ConsumerGroupSession) error {
	close(h.ready)
	return nil
}

func (h *ConsumerGroupHandler) Cleanup(sarama.ConsumerGroupSession) error {
	return nil
}

func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error {
	for {
		select {
		case <-session.Context().Done():
			return nil
		case message := <-claim.Messages():
			if message == nil {
				return nil
			}
			h.processMessage(session, message)
			session.MarkMessage(message, "")
		}
	}
}

func (h *ConsumerGroupHandler) processMessage(session sarama.ConsumerGroupSession, msg *sarama.ConsumerMessage) {
	h.mu.Lock()
	defer h.mu.Unlock()

	log.Printf("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
	log.Printf("üì® [‰∏ªÈ¢ò: %s | ÂàÜÂå∫: %d | ÂÅèÁßª: %d | Â§ßÂ∞è: %dÂ≠óËäÇ]",
		msg.Topic, msg.Partition, msg.Offset, len(msg.Value))
	log.Printf("‚è∞ Êó∂Èó¥Êà≥: %v", msg.Timestamp)

	bbmpMsg := &BBMPMessage{}
	err := proto.Unmarshal(msg.Value, bbmpMsg)
	if err != nil {
		log.Printf("‚ùå Protobuf Ëß£ÊûêÂ§±Ë¥•: %v", err)
		return
	}

	log.Printf("  üìã Ëß£ÊûêÁªìÊûú:")

	switch bbmpMsg.MessageType {
	case BBMPMessage_RouteMonitoringMessage:
		log.Printf("    Ê∂àÊÅØÁ±ªÂûã: RouteMonitoringMessage")
		log.Printf("    ‚úÖ Ë∑ØÁî±ÁõëÊéßÊ∂àÊÅØ")
		if bbmpMsg.BbmpUnicastMonitoringMessage != nil {
			displayRouteMonitoring(bbmpMsg.BbmpUnicastMonitoringMessage)
		}
	case BBMPMessage_PeerUpNotification:
		log.Printf("    Ê∂àÊÅØÁ±ªÂûã: PeerUpNotification")
		log.Printf("    ‚úÖ BGP ÂØπÁ≠â‰Ωì‰∏äÁ∫ø")
		if bbmpMsg.BbmpUnicastMonitoringMessage != nil {
			displayPeerEvent(bbmpMsg.BbmpUnicastMonitoringMessage, true)
		}
	case BBMPMessage_PeerDownNotification:
		log.Printf("    Ê∂àÊÅØÁ±ªÂûã: PeerDownNotification")
		log.Printf("    ‚ö†Ô∏è  BGP ÂØπÁ≠â‰Ωì‰∏ãÁ∫ø")
		if bbmpMsg.BbmpUnicastMonitoringMessage != nil {
			displayPeerEvent(bbmpMsg.BbmpUnicastMonitoringMessage, false)
		}
	case BBMPMessage_RouteMirroringMessage:
		log.Printf("    Ê∂àÊÅØÁ±ªÂûã: RouteMirroringMessage")
		log.Printf("    üìä Ë∑ØÁî±ÈïúÂÉèÊ∂àÊÅØ")
	case BBMPMessage_InitiationMessage:
		log.Printf("    Ê∂àÊÅØÁ±ªÂûã: InitiationMessage")
		log.Printf("    üöÄ BMP ‰ºöËØùÂàùÂßãÂåñ")
	case BBMPMessage_TerminationMessage:
		log.Printf("    Ê∂àÊÅØÁ±ªÂûã: TerminationMessage")
		log.Printf("    üõë BMP ‰ºöËØùÁªàÊ≠¢")
	default:
		log.Printf("    ‚ùì Êú™Áü•Ê∂àÊÅØÁ±ªÂûã: %v", bbmpMsg.MessageType)
	}
}

func main() {
	brokers := []string{"localhost:9092"}
	topics := []string{"bmp.mirroring"}
	groupID := "bgp-mirroring-consumer-group"

	log.Printf("üöÄ ÂêØÂä® Consumer Group: %s", groupID)
	log.Printf("üì° Kafka ‰ª£ÁêÜ: %v", brokers)
	log.Printf("üìã ËÆ¢ÈòÖ‰∏ªÈ¢ò: %v", topics)

	config := sarama.NewConfig()
	config.Version = sarama.V2_0_0_0
	config.Consumer.Group.Rebalance.Strategy = sarama.BalanceStrategyRoundRobin
	config.Consumer.Offsets.Initial = sarama.OffsetOldest
	config.Consumer.Offsets.AutoCommit.Enable = true
	config.Consumer.Offsets.AutoCommit.Interval = 1 * time.Second
	config.Net.DialTimeout = 10 * time.Second
	config.Net.ReadTimeout = 10 * time.Second
	config.Net.WriteTimeout = 10 * time.Second
	config.Consumer.Fetch.Max = 1024 * 100
	config.Consumer.Fetch.Default = 1024 * 100

	consumerGroup, err := sarama.NewConsumerGroup(brokers, groupID, config)
	if err != nil {
		log.Fatalf("‚ùå ÂàõÂª∫ Consumer Group Â§±Ë¥•: %v", err)
	}
	defer consumerGroup.Close()

	handler := &ConsumerGroupHandler{ready: make(chan bool)}
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	go func() {
		for {
			if err := consumerGroup.Consume(ctx, topics, handler); err != nil {
				log.Printf("‚ùå Consumer Group ÈîôËØØ: %v", err)
			}
			if ctx.Err() != nil {
				return
			}
			handler.ready = make(chan bool)
		}
	}()

	<-handler.ready
	log.Println("‚úÖ Consumer Group Â∑≤Â∞±Áª™ÔºåÂºÄÂßãÊ∂àË¥πÊ∂àÊÅØ...")
	log.Println("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)
	<-sigChan

	log.Println("\nüõë Êî∂Âà∞ÂÅúÊ≠¢‰ø°Âè∑ÔºåÊ≠£Âú®‰ºòÈõÖÂÖ≥Èó≠...")
	cancel()
	time.Sleep(2 * time.Second)
	log.Println("üëã Á®ãÂ∫èÂ∑≤ÈÄÄÂá∫")
}
